/**
 * The function generates all possible combinations of elements from an array that add up to a given
 * target value.
 * @param ind - The current index of the array being processed in the recursive function.
 * @param target - The target is the desired sum that we want to achieve using the elements of the
 * given array. The function tries to find all possible combinations of elements from the array that
 * add up to the target sum.
 * @param arr - an array of integers from which combinations are to be formed
 * @param ans - `ans` is an array that stores all the valid combinations of numbers that add up to the
 * `target` value. Each combination is represented as an array of numbers.
 * @param ds - "ds" stands for "data structure" and it is an array that is used to keep track of the
 * current combination being generated by the recursive function. The function pushes elements from the
 * input array "arr" into "ds" as it recursively calls itself to generate all possible combinations
 * that add up to
 * @returns Nothing is being returned explicitly in this code. The function is likely being used to
 * modify arrays (`ans` and `ds`) that are passed in as arguments.
 */
function combination(ind, target, arr, ans, ds) {
  if (ind === arr.length) {
    if (target === 0) {
      ans.push([...ds]);
    }
    return;
  }
  if (arr[ind] <= target) {
    ds.push(arr[ind]);
    combination(ind, target - arr[ind], arr, ans, ds);
    ds.pop();
  }
  combination(ind + 1, target, arr, ans, ds);
}

const arr = [2, 3, 6, 7];
const target = 7;
let ans = [];
let ds = [];
const result = combination(0, target, arr, ans, ds);
console.log(ans);
